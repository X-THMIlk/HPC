CopyPrivate
// omp_copyprivate.cpp
// compile with: /openmp#include <stdio.h>
#include <omp.h>
#include<stdio.h>
float x, y, fGlobal = 1.0;
#pragma omp threadprivate(x, y)
float get_float() {
	fGlobal += 0.001;
	return fGlobal;
}
void use_float(float f, int t) {
	printf("Value = %f, thread = %d\n", f, t);
}
void CopyPrivate(float a, float b) {
#pragma omp single copyprivate(a, b, x, y)
	{
		a = get_float();
		b = get_float();
		x = get_float();
		y = get_float();
	}
	use_float(a, omp_get_thread_num());
	use_float(b, omp_get_thread_num());
	use_float(x, omp_get_thread_num());
	use_float(y, omp_get_thread_num());
}
int main() {
	float a = 9.99, b = 123.456;
	printf("call CopyPrivate from a single thread\n");
	CopyPrivate(9.99, 123.456);
	printf("call CopyPrivate from a parallel region\n");
#pragma omp parallel
	{
		CopyPrivate(a, b);
	}
}
If
// omp_if.cpp
// compile with: /openmp
#include <stdio.h>
#include <omp.h>
void test(int val)
{
#pragma omp parallel if (val)
	if (omp_in_parallel())
	{
#pragma omp single
		printf_s("val = %d, parallelized with %d threads\n",
			val, omp_get_num_threads());
	}
	else
	{
		printf_s("val = %d, serialized\n", val);
	}
}
int main()
{
	omp_set_num_threads(2);
	test(0);
	test(2);
}
Nowait
// omp_nowait.cpp
// compile with: /openmp /c
#include <stdio.h>
#define SIZE 5
void test(int* a, int* b, int* c, int size)
{
	int i;
#pragma omp parallel
	{
#pragma omp for nowait
		for (i = 0; i < size; i++)
			b[i] = a[i] * a[i];
#pragma omp for nowait
		for (i = 0; i < size; i++)c[i] = a[i] / 2;
	}
}
int main()
{
	int a[SIZE], b[SIZE], c[SIZE];
	int i;
	for (i = 0; i < SIZE; i++)
		a[i] = i;
	test(a, b, c, SIZE);
	for (i = 0; i < SIZE; i++)
		printf_s("%d, %d, %d\n", a[i], b[i], c[i]);
}
Private
// openmp_private.c
// compile with: /openmp
#include <windows.h>
#include <assert.h>
#include <stdio.h>
#include <omp.h>
#define NUM_THREADS 4
#define SLEEP_THREAD 1
#define NUM_LOOPS 2
enum Types {
	ThreadPrivate, Private,
	FirstPrivate,
	LastPrivate,
	Shared,
	MAX_TYPES
};
int nSave[NUM_THREADS][MAX_TYPES][NUM_LOOPS] = { {0} };
int nThreadPrivate;
#pragma omp threadprivate(nThreadPrivate)
#pragma warning(disable:4700)
int main() {
	int nPrivate = NUM_THREADS;
	int nFirstPrivate = NUM_THREADS;
	int nLastPrivate = NUM_THREADS;
	int nShared = NUM_THREADS;
	int nRet = 0;
	int i;
	int j;
	int nLoop = 0;
	nThreadPrivate = NUM_THREADS;
	printf_s("These are the variables before entry "
		"into the parallel region.\n");
	printf_s("nThreadPrivate = %d\n", nThreadPrivate);
	printf_s(" nPrivate = %d\n", nPrivate);
	printf_s(" nFirstPrivate = %d\n", nFirstPrivate); printf_s(" nLastPrivate = %d\n", nLastPrivate);
	printf_s(" nShared = %d\n\n", nShared);
	omp_set_num_threads(NUM_THREADS);
#pragma omp parallel copyin(nThreadPrivate) private(nPrivate)
{
#pragma omp for schedule(static) lastprivate(nLastPrivate)
		for (i = 0; i < NUM_THREADS; ++i) {
			for (j = 0; j < NUM_LOOPS; ++j) {
				int nThread = omp_get_thread_num();
				assert(nThread < NUM_THREADS);
				if (nThread == SLEEP_THREAD)
					Sleep(100);
				nSave[nThread][ThreadPrivate][j] = nThreadPrivate;
				nSave[nThread][Private][j] = nPrivate;
				nSave[nThread][Shared][j] = nShared;
				nSave[nThread][FirstPrivate][j] = nFirstPrivate;
				nSave[nThread][LastPrivate][j] = nLastPrivate;
				nThreadPrivate = nThread;
				nPrivate = nThread;
				nShared = nThread;
				nLastPrivate = nThread;
				--nFirstPrivate;
			}
		}
	}for (i = 0; i < NUM_LOOPS; ++i) {
		for (j = 0; j < NUM_THREADS; ++j) {
			printf_s("These are the variables at entry of "
				"loop %d of thread %d.\n", i + 1, j);
			printf_s("nThreadPrivate = %d\n",
				nSave[j][ThreadPrivate][i]);
			printf_s(" nPrivate = %d\n",
				nSave[j][Private][i]);
			printf_s(" nFirstPrivate = %d\n",
				nSave[j][FirstPrivate][i]);
			printf_s(" nLastPrivate = %d\n",
				nSave[j][LastPrivate][i]);
			printf_s(" nShared = %d\n\n",
				nSave[j][Shared][i]);
		}
	}
	printf_s("These are the variables after exit from "
		"the parallel region.\n");
	printf_s("nThreadPrivate = %d (The last value in the "
		"main thread)\n", nThreadPrivate);
	printf_s(" nPrivate = %d (The value prior to "
		"entering parallel region)\n", nPrivate);
	printf_s(" nFirstPrivate = %d (The value prior to "
		"entering parallel region)\n", nFirstPrivate); printf_s(" nLastPrivate = %d (The value from the "
			"last iteration of the loop)\n", nLastPrivate);
	printf_s(" nShared = %d (The value assigned, "
		"from the delayed thread, %d)\n\n",
		nShared, SLEEP_THREAD);
}
Reduction
// omp_reduction.cpp
// compile with: /openmp
#include <stdio.h>
#include <omp.h>
#define NUM_THREADS 4
#define SUM_START 1
#define SUM_END 10
#define FUNC_RETS {1, 1, 1, 1, 1}
int bRets[5] = FUNC_RETS;
int nSumCalc = ((SUM_START + SUM_END) * (SUM_END - SUM_START + 1))
/ 2;
int func1() { return bRets[0]; }
int func2() { return bRets[1]; }
int func3() { return bRets[2]; }
int func4() { return bRets[3]; }
int func5() { return bRets[4]; }
int main()
{
	int nRet = 0, nCount = 0,
		nSum = 0,
		i,
		bSucceed = 1;
	omp_set_num_threads(NUM_THREADS);
#pragma omp parallel reduction(+ : nCount)
	{
		nCount += 1;
#pragma omp for reduction(+ : nSum)
		for (i = SUM_START; i <= SUM_END; ++i)
			nSum += i;
#pragma omp sections reduction(&& : bSucceed)
		{
#pragma omp section
			{
				bSucceed = bSucceed && func1();
			}
#pragma omp section
			{
				bSucceed = bSucceed && func2();
			}
#pragma omp section
			{
				bSucceed = bSucceed && func3();
			}
#pragma omp section
			{
				bSucceed = bSucceed && func4();
			}
#pragma omp section
			{
				bSucceed = bSucceed && func5();
			}
		}
	}
	printf_s("The parallel section was executed %d times "
		"in parallel.\n", nCount);
	printf_s("The sum of the consecutive integers from "
		"%d to %d, is %d\n", 1, 10, nSum);
	if (bSucceed)
		printf_s("All of the functions, func1 through "
			"func5 succeeded!\n");
	else
		printf_s("One or more of the functions, func1 "
			"through func5 failed!\n");
	if (nCount != NUM_THREADS)
	{
		printf_s("ERROR: For %d threads, %d were counted!\n",
			NUM_THREADS, nCount); nRet |= 0x1;
	}
	if (nSum != nSumCalc)
	{
		printf_s("ERROR: The sum of %d through %d should be %d, "
			"but %d was reported!\n",
			SUM_START, SUM_END, nSumCalc, nSum);
		nRet |= 0x10;
	}
	if (bSucceed != (bRets[0] && bRets[1] &&
		bRets[2] && bRets[3] && bRets[4]))
	{
		printf_s("ERROR: The sum of %d through %d should be %d, "
			"but %d was reported!\n",
			SUM_START, SUM_END, nSumCalc, nSum);
		nRet |= 0x100;
	}
}
Schedule
// omp_schedule.cpp
// compile with: /openmp
#include <windows.h>
#include <stdio.h>
#include <omp.h>#define NUM_THREADS 4
#define STATIC_CHUNK 5
#define DYNAMIC_CHUNK 5
#define NUM_LOOPS 20
#define SLEEP_EVERY_N 3
#define NUM_THREADS 4
int main()
{
	int nStatic1[NUM_LOOPS],
		nStaticN[NUM_LOOPS];
	int nDynamic1[NUM_LOOPS],
		nDynamicN[NUM_LOOPS];
	int nGuided[NUM_LOOPS];s
	omp_set_num_threads(NUM_THREADS);
#pragma omp parallel
	{
#pragma omp for schedule(static, 1)
		for (int i = 0; i < NUM_LOOPS; ++i)
		{
			if ((i % SLEEP_EVERY_N) == 0)
				Sleep(0);
			nStatic1[i] = omp_get_thread_num();
		}
#pragma omp for schedule(static, STATIC_CHUNK)
		for (int i = 0; i < NUM_LOOPS; ++i)
		{
			if ((i % SLEEP_EVERY_N) == 0)
				Sleep(0);
			nStaticN[i] = omp_get_thread_num();
		}
#pragma omp for schedule(dynamic, 1)
		for (int i = 0; i < NUM_LOOPS; ++i)
		{
			if ((i % SLEEP_EVERY_N) == 0)
				Sleep(0);
			nDynamic1[i] = omp_get_thread_num();
		}
#pragma omp for schedule(dynamic, DYNAMIC_CHUNK)
		for (int i = 0; i < NUM_LOOPS; ++i)
		{
			if ((i % SLEEP_EVERY_N) == 0)
				Sleep(0);
			nDynamicN[i] = omp_get_thread_num();
		}
#pragma omp for schedule(guided)
		for (int i = 0; i < NUM_LOOPS; ++i)
		{
			if ((i % SLEEP_EVERY_N) == 0)
				Sleep(0);
			nGuided[i] = omp_get_thread_num();
		}
	}
	printf_s("------------------------------------------------\n");
	printf_s("| static | static | dynamic | dynamic | guided |\n");
	printf_s("| 1 | %d | 1 | %d | |\n",
		STATIC_CHUNK, DYNAMIC_CHUNK);
	printf_s("------------------------------------------------\n");
	for (int i = 0; i < NUM_LOOPS; ++i)
	{
		printf_s("| %d | %d | %d | %d |"
			" %d |\n",
			nStatic1[i], nStaticN[i],
			nDynamic1[i], nDynamicN[i], nGuided[i]);
	}
	printf_s("------------------------------------------------\n");
}
